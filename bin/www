#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server-native-video-chat:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);



/**
 * Peer.js stuff.
 */
var options = {
    debug: true
};

var ExpressPeerServer = require('peer').ExpressPeerServer;
peerServer = ExpressPeerServer(server, options);
app.use('/peerjs', peerServer);

var io = require('socket.io')(server);

io.on('connection', function(socket) {

    // convenience function to log server messages on the client
    function log(message) {
        var array = ['Message from server:'];
        array.push.apply(array, arguments);
        socket.emit('log', array);
        console.log(message);
    }

    socket.on('message', function (message) {
        log('Client said: ', message);
        var room = message['room'];
        if (room) {
         //   io.sockets.in(room).emit('message', message);
socket.broadcast.to(room).emit('message', message);
        }
    });




// SEND PUSHKIT NOTIFICATION
 socket.on('notify', function (message) {
 


//Replace this code with your PUSHKIT implementation
//You should get YOUR_PUSHKIT_TOKEN from message["userId"], if you can't notify me

    /*  

 curl -v -d JSON.stringify(message) --http2 --cert voipCert.pem:YOUR_PASS https://api.development.push.apple.com/3/device/YOUR_PUSHKIT_TOKEN



*/
    });







    socket.on('create or join', function (room) {
        log('Received request to create or join room ' + room);


        var clientsInRoom = io.sockets.adapter.rooms[room];
        console.log(clientsInRoom);

        var numClients = clientsInRoom ? Object.keys(clientsInRoom).length : 0;
        log('Room ' + room + ' now has ' + numClients + ' client(s)');

        if (numClients === 0) {
            socket.join(room);
            log('Client ID ' + socket.id + ' created room ' + room);
            socket.emit('created', room, socket.id);
        } else if (numClients === 1) {
            log('Client ID ' + socket.id + ' joined room ' + room);
            io.sockets.in(room).emit('join', room);
            socket.join(room);
            socket.emit('joined', room, socket.id);
            io.sockets.in(room).emit('ready');
        } else { // max 5 clients
            socket.emit('full', room);
        }


    });

    socket.on('ipaddr', function () {
        var ifaces = os.networkInterfaces();
        for (var dev in ifaces) {
            ifaces[dev].forEach(function (details) {
                if (details.family === 'IPv4' && details.address !== '127.0.0.1') {
                    socket.emit('ipaddr', details.address);
                }
            });
        }
    });

    socket.on('bye', function (room) {
        io.sockets.in(room).emit('bye', room);
    });
});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
